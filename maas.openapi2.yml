swagger: 2.0
info:
  title: MaaS
  description: Draft for MaaS (Matomat as a Service)
  version: 0.2.0
host: localhost:8443
basePath: /v0
schemes:
  - https
tags:
- name: auth
  description: Authentication and authorization related operations
- name: users
  description: User management related operations
- name: items
  description: Item related operations
paths:
  /auth/login:
    post:
      tags:
      - auth
      summary: Logs a user in and returns an JWT token for authentication
      description: Logs a user in and returns an JWT token for authentication. The passes along validitiyseconds determine how long the token should be available.
      consumes:
        - application/x-www-form-urlencoded      
      parameters:
        - in: formData
          name: username
          type: string
          required: true 
        - in: formData
          name: password
          type: string
          required: true
        - in: formData
          name: validityseconds
          type: integer
          minimum: 0          
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/AuthSuccess'
        400:
          description: Invalid username/password supplied
  /items:
    get:
      tags:
      - items
      summary: List all available items
      description: Returns a map of item objects, with the item ID as key and the object as value
      produces:
        - application/json
      responses:
        200:
          description: List of items
          schema:
            type: array
            items:
              $ref: '#/definitions/Item'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
      - items
      summary: Add a new item
      description: Adds a new item to matomat. This can only be done by admins
      consumes:
        - application/x-www-form-urlencoded      
      produces:
        - application/json
      parameters:
        - in: formData
          name: name
          type: string
          required: true 
        - in: formData
          name: cost
          type: integer
          minimum: 0
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Item'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
  /items/stats:
    get:
      tags:
      - items
      summary: Get consumption stats of all items
      description: Get the matomat stats for all items
      produces:
        - application/json      
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/ItemStats'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
  /items/{itemId}:
    parameters:
      - in: path
        name: itemId
        type: integer
        required: true
        description: The ID of the Item to perform an operation on
    get:
      tags:
      - items
      summary: Get a certain Item
      description: Get a certain Item
      produces:
        - application/json      
      responses:
        200:
          description: successful operation
          schema:          
            $ref: '#/definitions/Item'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
      - items
      summary: Update Item
      description: Update Item. This can only be done by admins
      consumes:
        - application/x-www-form-urlencoded      
      produces:
        - application/json      
      parameters:
        - in: formData
          name: name
          type: string
          required: true 
        - in: formData
          name: cost
          type: integer
          minimum: 0
          required: true        
      responses:
        200:
          description: Success
          schema:          
            $ref: '#/definitions/Item'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
      - items
      summary: Delete Item
      description: Delete the Item. This can only be done by admins. (Should only mark a Item as deleted to not loose reference for stats)
      produces:
        - application/json      
      responses:
        200:
          description: Success. Returns the deleted item object
          schema:          
            $ref: '#/definitions/Item'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
  /items/{itemId}/consume:
    put:
      tags:
      - items
      summary: Consumes a Item
      description: Consumes a Item and subtracts the cost of the Item from the credit of the user. If not enough credit exists the operation will be rejected
      produces:
        - application/json      
      parameters:
        - in: path
          name: itemId
          type: integer
          required: true
          description: The ID of the Item that needs to be consumed
      responses:
        200:
          description: Success
          schema:          
            $ref: '#/definitions/ItemStats'
        412:
          description: Not enough credits to consume Item
          schema:
            $ref: '#/definitions/Error'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
  /items/{itemId}/stats:
    get:
      tags:
      - items
      summary: Get consumption stats
      description: Get the matomat stats for a certain Item
      produces:
        - application/json      
      parameters:
        - in: path
          name: itemId
          type: integer
          required: true
          description: The ID of the Item for which to fetch the stats
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ItemStats'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
  /users:
    get:
      tags:
      - users
      summary: List all users
      description: List all users
      produces:
        - application/json
      responses:
        200:
          description: List of user objects
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
      - users
      summary: Add a new user
      description: Add a new user. Only admin users are allowed to do this
      consumes:
        - application/x-www-form-urlencoded      
      produces:
        - application/json
      parameters:
        - in: formData
          name: name
          type: string
          required: true 
        - in: formData
          name: password
          type: string
          required: true
        - in: formData
          name: passwordrepeat
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/User'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
  /users/{userId}:
    parameters:
      - in: path
        name: userId
        type: integer
        required: true
        description: The user ID that to perform the operation on
    get:
      tags:
      - users
      summary: Get user by user ID
      description: Get user by user ID. Returns a user object
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/User'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
      - users
      summary: Delete user
      description: Delete user. This can only be done by the logged in user (for self) or an admin
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/User'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
  /users/{userId}/credits/add:
    put:
      tags:
      - users
      summary: Add users credits
      description: Add users credits. This can only be done by the logged in user
      consumes:
        - application/x-www-form-urlencoded      
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          type: integer
          required: true
          description: The ID of the user for which the credits should be changed
        - in: formData
          name: credits
          type: integer
          minimum: 0
          required: true     
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/User'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
  /users/{userId}/credits/withdraw:
    put:
      tags:
      - users
      summary: Widthdraw users credits
      description: Widthdraw users credits. A user can only withdraw as many credits as she currently has, if more than available are attempted to withdraw, an error is returned and no withdrawl performed. This can only be done by the logged in user
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          type: integer
          required: true
          description: The ID of the user for which the credits should be changed
        - in: formData
          name: credits
          type: integer
          minimum: 0
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/User'
        412:
          description: Not enough credits to withdraw desired amount      
          schema:
            $ref: '#/definitions/Error'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
  /users/{userId}/credits/transfer:
    put:
      tags:
      - users
      summary: Transfer credits
      description: Transfers credits from logged in user to given user
      consumes:
        - application/x-www-form-urlencoded      
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          type: integer
          required: true
          description: The ID of the user to transfer credits to
        - in: formData
          name: credits
          type: integer
          minimum: 0
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/TransferredCredits'
        412:
          description: Not enough credits to transfer desired amount
          schema:
            $ref: '#/definitions/Error'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
  /users/{userId}/stats:
    get:
      tags:
      - users
      summary: Get matomat stats for user
      description: Get the matomat stats for user. A user can only request the stats for herself
      produces:
        - application/json
      parameters:
      - in: path
        name: userId
        type: integer
        required: true
        description: The ID of the user for which to fetch the stats
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/UserStats'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
  /users/password:
    put:
      tags:
      - users
      summary: Set password for currently logged in user.
      description: Set password for currently logged in user. TODO must provide old and new password (twice) in order to be allowed to change it.
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          type: integer
          required: true
          description: The ID of the user do which the password should be changed
        - in: formData
          name: password
          type: string
          required: true
        - in: formData
          name: passwordnew
          type: string
          required: true          
        - in: formData
          name: passwordrepeat
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/User'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
  /users/{userId}/password:
    put:
      tags:
      - users
      summary: Set password for user ID
      description: Set password for user ID. This can only be done by the logged by a admin for a different user. TODO expect the new password (twice)
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          type: integer
          required: true
          description: The ID of the user do which the password should be changed
        - in: formData
          name: passwordnew
          type: string
          required: true          
        - in: formData
          name: passwordrepeat
          type: string
          required: true
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/User'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
  /service/stats:
    get:
      tags:
      - service
      summary: Total service stats 
      description: Total service stats
      produces:
        - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/ServiceStats'
        default:
          description: An error occured
          schema:
            $ref: '#/definitions/Error'
definitions:
  AuthSuccess:
    type: object
    properties:
      token:
        type: string
      expires:
        type: integer
        format: int32        
  User:
    type: object
    properties:
      id:
        type: integer
        format: int32
      username:
        type: string
      credits:
        type: integer
        format: int32
  TransferredCredits:
    description: The information on the sending user after the transaction, as well as the amount transferred
    type: object
    properties:
      sender:
        $ref: '#/definitions/User'
      credits:
        type: integer
        format: int32
  UserStats:
    description: Consumption stats of a user
    type: array
    items:
      $ref: '#/definitions/ItemStats'
  Item:
    description: Represenation of a Item, containing its name and cost (in credits)
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string          
      cost:
        type: integer
        format: int32
  ItemStats:
    description: Stats on a certain item
    type: object
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
      cost:
        type: integer
        format: int32
      consumed:
        type: integer
        format: int32
  ServiceStats:
    description: Stats on the service
    type: object
    properties:
      items:
        type: object
        properties:
          count:
            type: integer
            format: int32
          cost:
            type: object
            properties:
              avg:
                type: integer
                format: int32
              min:
                type: integer
                format: int32
              max:
                type: integer
                format: int32
      users:
        type: object
        properties:
          count:
            type: integer
            format: int32                
          credits:
            type: object
            properties:
              sum:
                type: integer
                format: int32
              avg:
                type: integer
                format: int32
              min:
                type: integer
                format: int32
              max:
                type: integer
                format: int32
  Error:
    description: Represenation of an error
    type: object
    properties:
      message:
        type: string